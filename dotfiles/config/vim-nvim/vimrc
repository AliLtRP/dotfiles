"   __     __        ______        __       __
"  |  \   |  \      |      \      |  \     /  \
"  | $$   | $$       \$$$$$$      | $$\   /  $$
"  | $$   | $$        | $$        | $$$\ /  $$$
"   \$$\ /  $$        | $$        | $$$$\  $$$$
"    \$$\  $$         | $$        | $$\$$ $$ $$
"     \$$ $$         _| $$_       | $$ \$$$| $$
"      \$$$         |   $$ \      | $$  \$ | $$
"       \$           \$$$$$$       \$$      \$$
"
"

" ---- Basic Settings ----------------------------------------------------------

set shell=/usr/bin/zsh                          " set default shell
set noswapfile                                  " no swap files
syntax enable                                   " enable syntax
filetype plugin indent on
set mouse=a                                     " enable mouse
set number relativenumber                       "line numbers
set history=1000                                " command history
set signcolumn=yes numberwidth=6                "signcolumn and available width
set updatetime=300                              " delay for plugin trigger
set linebreak                                   " text wrap wont break words
set textwidth=80                                "line length
set title                                       " window title current file
set spell                                       " spell check
set nocompatible                                " no vi compatibility
set smartcase ignorecase incsearch              " searching and highlighting
set foldmethod=indent foldlevel=2 foldcolumn=2  " code folding
set foldlevelstart=99 foldopen+=jump            " auto fold open/close
set clipboard=unnamedplus                       " clipboard register
set tabstop=8 softtabstop=0                     " tab settings
set expandtab shiftwidth=2 smarttab
set breakindent                                 " smart wrapping indentation
set breakindentopt=shift:2,min:40,sbr
set showbreak=>>                                " shows line break
set showcmd                                     " key strokes in command line
set splitbelow splitright                       " new windows split right/bottom
set wildmenu wildmode=longest:full,full         " command autocompletion
set timeoutlen=1000 ttimeoutlen=1000            " timeout for keybind presses
set autowrite                                   " auto save
set confirm                                     " prompt to save not error
set undodir=~/.vim-undo undofile                " persistent undo
set listchars=tab:>-                            " no endline chars


" ---- Plugins -----------------------------------------------------------------

call plug#begin('~/.config/nvim/plugged')
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
  Plug 'preservim/nerdcommenter'
  Plug 'preservim/tagbar', { 'on': 'TagbarToggle' }
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'
  Plug 'xolox/vim-misc'
  Plug 'xolox/vim-session'
  Plug 'rust-lang/rust.vim'
  Plug 'godlygeek/tabular', { 'on': 'Tab' }
  Plug 'tpope/vim-fugitive'
  Plug 'thaerkh/vim-indentguides'
  Plug 'morhetz/gruvbox'
  Plug 'dense-analysis/ale'
  Plug 'luochen1990/rainbow'
  Plug 'Raimondi/delimitMate'
  Plug 'mg979/vim-visual-multi', {'branch': 'master'}
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'tmux-plugins/vim-tmux'
  Plug 'airblade/vim-gitgutter'
  Plug 'lervag/vimtex'
  Plug 'ConradIrwin/vim-bracketed-paste'
  Plug 'matze/vim-move'
  Plug 'PeterRincker/vim-searchlight'
  Plug 'tpope/vim-surround'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tommcdo/vim-lion'
call plug#end()


" ---- Plugin Settings ---------------------------------------------------------

" airline {
  " display all buffers if one tab open
  let g:airline#extensions#tabline#enabled = 1
  " how file paths are shown
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
  let g:airline_powerline_fonts = 1             " powerline integration
  let g:airline_theme='bubblegum'               " status bar theme
" }
" NerdComment {
  let g:NERDSpaceDelims = 1                     " add space after comment char
  let g:NERDCompactSexyComs = 1                 " short syntax in comment blocks
  let g:NERDCommentEmptyLines = 1               " allow comments on empty lines
" }
" Vim-Session {
  let g:session_autosave = 'yes'                " auto save session periodically
" }
" Rainbow Brackets {
  let g:rainbow_active = 1                      " rainbow brackets
" }
" Indent Guides {
  let g:indentguides_spacechar = '|'            " indent guide chars
  let g:indentguides_tabchar = '|'
" }
" Ale {
  let g:ale_disable_lsp = 1                     " disable lsp for ale
  let g:ale_fix_on_save = 1                     " autoformat on save
" }
" Limelight {
  let g:limelight_conceal_ctermfg = 'gray'      " Color dimming
  let g:limelight_conceal_guifg = 'DarkGray'
" }
" ---- Extra Settings ----------------------------------------------------------

" change cursor shape
let &t_SI = "\<Esc>[6 q"                        " insert mode, vertical bar
let &t_SR = "\<Esc>[4 q"                        " replace mode, underscore
let &t_EI = "\<Esc>[2 q"                        " normal mode, block

" shows number of errors on status bar
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? 'OK' : printf(
        \   '%d⨉ %d⚠ ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=\ %{LinterStatus()}

" Auto Formatting
command! -nargs=0 Format :call CocAction('format')
" highlight symbol on press
autocmd CursorHold * silent call CocActionAsync('highlight')

" deal with color
if !has('gui_running')
  set t_Co=256
endif
if (match($TERM, "-256color") != -1) && (match($TERM, "screen-256color") == -1)
  " screen does not (yet) support truecolor
  set termguicolors
endif
set background=dark
let g:gruvbox_number_column = 'bg1'
autocmd vimenter * ++nested colorscheme gruvbox

" Auto delete trailing whitespace, save cursor position
autocmd BufWritePre * let currPos = getpos(".")
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e
autocmd BufWritePre *.[ch] %s/\%$/\r/e
autocmd BufWritePre * cal cursor(currPos[1], currPos[2])

" WSL yank support
if system('uname -r') =~ "microsoft"
  augroup Yank
    autocmd!
    autocmd TextYankPost * :call system('/mnt/c/windows/system32/clip.exe ',@")
    augroup END
  endif

" highlight lines longer than 80 then 120 chars
call matchadd('ColorColumn', '\(\%81v\|\%121v\)', 200)

" fixes lag of exiting insert/visual mode
if !has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" Override colors
augroup vimrc
  autocmd!
  autocmd ColorScheme * highlight ColorColumn cterm=bold ctermfg=196
       \ ctermbg=None guifg=Red guibg=NONE
  autocmd ColorScheme * highlight Search cterm=None guibg=Grey50 guifg=NONE
        \ ctermbg=244 ctermfg=16
augroup END

" remember folds
augroup remember_folds
  autocmd!
  autocmd BufWinLeave * silent! mkview
  autocmd BufWinEnter * silent! loadview
augroup END

" get rid of auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" add cursorline when not in insert mode
autocmd VimEnter * set cul
autocmd InsertLeave * set cul
autocmd InsertEnter * set nocul

" ---- Keybindings -------------------------------------------------------------

let mapleader=" "                               " Leader Character to Space
" COC {
  " errors
  nnoremap <silent> cd :lopen<CR>
  nnoremap <silent> cl :lclose<CR>
  nnoremap <silent> [g :lnext<CR>
  nnoremap <silent> ]g :lprev<CR>
  " Coc navigation
  nnoremap <silent> gd <Plug>(coc-definition)
  nnoremap <silent> gy <Plug>(coc-type-definition)
  nnoremap <silent> gi <Plug>(coc-implementation)
  nnoremap <silent> gr <Plug>(coc-references)
  nnoremap <silent> ga :CocAction<CR>
  " Symbol renaming.
  nnoremap <leader>rn <Plug>(coc-rename)
" }
" Multiline {
  let g:VM_maps = {}
  let g:VM_maps["Add Cursor Down"] = '<Leader>.'
  let g:VM_maps["Add Cursor Up"] = '<Leader>,'
  let g:VM_maps["Undo"] = 'u'
  let g:VM_maps["Redo"] = '<C-r>'
" }
" Goyo {
  nnoremap <silent> goyo :Goyo<CR>
  nnoremap <silent> !goyo :Goyo!<CR>
" }
" Limelight {
  nnoremap <silent> lime :Limelight<CR>
  nnoremap <silent> !lime :Limelight!<CR>
" }
" NERDTree {
  nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
" }
" Vim Session {
  nnoremap <Leader>o :OpenSession<CR><cr>
  nnoremap <Leader>s :SaveSession<CR>
" }
" UltiSnips {
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-b>"
  let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" }
" Tagbar {
  nnoremap <Leader>tt :TagbarToggle<CR>
" }
" Move {
  let g:move_key_modifier_visualmode = 'C'        " Change from alt to ctrl
" }
" Autocomplete {
  inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  " imports
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }
" Windows {
  " ctrl+key to switch windows
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
  " create new windows
  nnoremap <Leader>v <C-w>v
  nnoremap <Leader>h <C-w>s
" }
" Buffers {
  " change buffers
  nnoremap <Leader>n bn<cr>
  nnoremap <Leader>d bd<cr>
  nnoremap <Leader>p bp<cr>
" }
" Misc {
  " enter to get rid of highlights
  nnoremap <cr> :noh<CR><CR>
  " exit vim command mode
  tnoremap <Esc> <C-\><C-n>
" }
" Delimiter Tabs {
  " toggle hl search
  nnoremap <Leader>/ :set hlsearch<cr>
  nnoremap i :set nohlsearch<cr>i
  " tab out of delimiters
  inoremap <Esc>[Z <left><c-o>/["')>}\]]<cr><c-o>:noh<cr><right>

" }
" Visual Block Mode {
  command! Vb normal! <C-v>
  nnoremap <silent> vb :Vb<CR>
" }
